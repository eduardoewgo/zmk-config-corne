/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tog_league_minus: tog_league_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_LEAGUE_MINUS";
            bindings = <&kp MINUS>, <&tog 4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        w_snipping: w_snipping {
            compatible = "zmk,behavior-tap-dance";
            label = "W_SNIPPING";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LEFT_SHIFT>, <&kp S>;
        };

        m_snipping: m_snipping {
            compatible = "zmk,behavior-tap-dance";
            label = "M_SNIPPING";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LEFT_GUI>, <&kp NUMBER_4>;
        };

        sel_w_backward: sel_w_backward {
            compatible = "zmk,behavior-tap-dance";
            label = "SEL_W_BACKWARD";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LCTRL>, <&kp LEFT_ARROW>;
        };

        sel_w_forward: sel_w_forward {
            compatible = "zmk,behavior-tap-dance";
            label = "SEL_W_FORWARD";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LCTRL>, <&kp RIGHT_ARROW>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q        &kp W       &kp E           &kp R             &kp T        &kp Y    &kp U       &kp I      &kp O    &kp P     &tog_league_minus
&kp LCTRL  &hm LCTRL A  &hm RALT S  &hm LEFT_GUI D  &hm LEFT_SHIFT F  &kp G        &kp H    &kp J       &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z        &kp X       &kp C           &kp V             &kp B        &kp N    &kp M       &kp COMMA  &kp DOT  &kp FSLH  &kp ESCAPE
                                    &mo 2           &kp BSPC          &kp SPACE    &kp RET  &kp ESCAPE  &mo 1
            >;
        };

        symbols {
            bindings = <
&kp TAB    &kp EXCL   &kp AT    &kp HASH   &kp DLLR  &kp PRCNT    &trans  &kp LBKT  &kp RBKT  &trans            &trans         &kp MINUS
&kp LCTRL  &kp CARET  &kp AMPS  &kp ASTRK  &trans    &trans       &trans  &kp LPAR  &kp RPAR  &kp EQUAL         &trans         &kp GRAVE
&kp LSHFT  &trans     &trans    &trans     &trans    &trans       &trans  &kp LBRC  &kp RBRC  &kp GREATER_THAN  &kp LESS_THAN  &kp TILDE
                                &trans     &trans    &trans       &trans  &trans    &trans
            >;
        };

        nav {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6           &kp N7    &kp N8  &kp N9          &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT         &kp DOWN  &kp UP  &kp RIGHT       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &sel_w_backward  &trans    &trans  &sel_w_forward  &trans  &trans
                        &trans  &trans  &trans    &trans           &trans    &trans
            >;
        };

        shortcuts {
            bindings = <
&trans  &trans       &trans       &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &w_snipping  &m_snipping  &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR   &bt BT_PRV   &bt BT_NXT  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans      &trans  &trans    &trans  &trans  &trans
            >;
        };

        league {
            bindings = <
&trans  &kp Q         &kp W         &kp E         &kp R         &kp T     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A         &kp S         &kp D         &kp F         &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp V     &trans  &trans  &trans  &trans  &trans  &trans
                                    &kp ESCAPE    &kp LEFT_ALT  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        one_two {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
