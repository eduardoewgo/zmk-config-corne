/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tl_escape: tl_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "TL_ESCAPE";
            bindings = <&kp ESCAPE>, <&tog 4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lp {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_rp {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <18 19>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <19 31>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_gt {
            bindings = <&kp GREATER_THAN>;
            key-positions = <32 20>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_lt {
            bindings = <&kp LESS_THAN>;
            key-positions = <21 33>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <6 7>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <16 17>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB         &kp Q        &kp W       &kp E           &kp R             &kp T                     &kp Y    &kp U             &kp I           &kp O            &kp P                  &tl_escape
&mo 2           &hm LCTRL A  &hm RALT S  &hm LEFT_GUI D  &hm LEFT_SHIFT F  &kp G                     &kp H    &hm LEFT_SHIFT J  &hm LEFT_GUI K  &hm RIGHT_ALT L  &hm LEFT_CONTROL SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z        &kp X       &kp C           &kp V             &kp B                     &kp N    &kp M             &kp COMMA       &kp DOT          &kp FSLH               &kp MINUS
                                         &mo 1           &kp BACKSPACE     &mt LEFT_COMMAND SPACE    &kp RET  &kp ESC           &mo 1
            >;
        };

        symbols {
            bindings = <
&trans  &trans       &trans    &trans    &trans    &trans       &kp DOUBLE_QUOTES  &kp LBKT  &kp RBKT  &kp PIPE          &kp ASTRK      &kp FSLH
&trans  &kp PERCENT  &kp AMPS  &kp EXCL  &kp AT    &kp DLLR     &kp GRAVE          &kp LPAR  &kp RPAR  &kp EQUAL         &kp PLUS       &kp MINUS
&trans  &trans       &trans    &trans    &kp HASH  &kp CARET    &kp TILDE          &kp LBRC  &kp RBRC  &kp GREATER_THAN  &kp LESS_THAN  &kp UNDER
                               &trans    &trans    &trans       &trans             &trans    &trans
            >;
        };

        nav {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6                  &kp N7           &kp N8       &kp N9                   &kp N0                  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp LEFT                &kp DOWN         &kp UP       &kp RIGHT                &trans                  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LA(LS(LEFT_ARROW))  &kp LC(LS(TAB))  &kp LC(TAB)  &kp LA(LS(RIGHT_ARROW))  &kp LS(LC(LEFT_ARROW))  &kp LS(LC(RIGHT_ARROW))
                        &trans  &trans  &trans    &trans                  &kp LG(LS(A))    &trans
            >;
        };

        shortcuts {
            bindings = <
&none  &none          &none                     &none       &none  &none    &kp LG(GRAVE)   &kp LC(LA(D))      &kp LC(LA(F))    &kp LC(LA(G))  &none     &none
&none  &kp LG(LS(S))  &kp LG(LS(LC(NUMBER_4)))  &none       &none  &none    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT     &kp C_PP  &none
&none  &bt BT_CLR     &bt BT_PRV                &bt BT_NXT  &none  &none    &trans          &trans             &none            &none          &none     &trans
                                                &none       &none  &none    &none           &none              &none
            >;
        };

        league {
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E         &kp R   &kp T     &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL       &kp A  &kp S  &kp D         &kp F   &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C         &kp V   &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                              &kp LEFT_ALT  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cond_shortcuts {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
