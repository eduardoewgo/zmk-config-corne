/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tl_backspace: tl_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "TL_BACKSPACE";
            bindings = <&kp BACKSPACE>, <&tog 4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB  &kp Q        &kp W       &kp E           &kp R             &kp T        &kp Y    &kp U             &kp I           &kp O            &kp P                  &tl_backspace
&mo 2    &hm LCTRL A  &hm RALT S  &hm LEFT_GUI D  &hm LEFT_SHIFT F  &kp G        &kp H    &hm LEFT_SHIFT J  &hm LEFT_GUI K  &hm RIGHT_ALT L  &hm LEFT_CONTROL SEMI  &kp SQT
&mo 1    &kp Z        &kp X       &kp C           &kp V             &kp B        &kp N    &kp M             &kp COMMA       &kp DOT          &kp FSLH               &kp ESCAPE
                                  &kp MINUS       &kp BACKSPACE     &kp SPACE    &kp RET  &kp TAB           &mo 1
            >;
        };

        symbols {
            bindings = <
&trans  &kp EXCL   &kp AT    &kp HASH   &kp DLLR  &kp PRCNT    &trans  &kp LBKT  &kp RBKT  &trans            &trans         &kp MINUS
&trans  &kp CARET  &kp AMPS  &kp ASTRK  &trans    &trans       &trans  &kp LPAR  &kp RPAR  &kp EQUAL         &trans         &kp GRAVE
&trans  &trans     &trans    &trans     &trans    &trans       &trans  &kp LBRC  &kp RBRC  &kp GREATER_THAN  &kp LESS_THAN  &kp TILDE
                             &trans     &trans    &trans       &trans  &trans    &trans
            >;
        };

        nav {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6                  &kp N7           &kp N8       &kp N9                   &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT                &kp DOWN         &kp UP       &kp RIGHT                &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LA(LS(LEFT_ARROW))  &kp LC(LS(TAB))  &kp LC(TAB)  &kp LA(LS(RIGHT_ARROW))  &trans  &trans
                        &trans  &trans  &trans    &trans                  &kp LG(LS(A))    &trans
            >;
        };

        shortcuts {
            bindings = <
&none  &none          &none                 &none       &none  &none    &none             &none              &none            &none  &none  &none
&none  &kp LG(LS(S))  &kp LG(LC(NUMBER_4))  &none       &none  &none    &none             &none              &none            &none  &none  &none
&none  &bt BT_CLR     &bt BT_PRV            &bt BT_NXT  &none  &none    &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none  &none  &none
                                            &none       &none  &none    &none             &none              &none
            >;
        };

        league {
            bindings = <
&kp TAB    &kp Q         &kp W         &kp E         &kp R         &kp T     &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp A         &kp S         &kp D         &kp F         &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&kp V      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                       &kp ESCAPE    &kp LEFT_ALT  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        one_two {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
